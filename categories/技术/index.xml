<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 二向箔</title>
    <link>https://blog.dingkewz.com/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 二向箔</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 14 Jul 2018 10:33:02 +0800</lastBuildDate><atom:link href="https://blog.dingkewz.com/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>他山之石之Byzantine Generals Problem</title>
      <link>https://blog.dingkewz.com/post/tech/byzantine_general_problem/</link>
      <pubDate>Sat, 14 Jul 2018 10:33:02 +0800</pubDate>
      
      <guid>https://blog.dingkewz.com/post/tech/byzantine_general_problem/</guid>
      <description>&lt;p&gt;&lt;strong&gt;论文出处: &lt;a href=&#34;https://people.eecs.berkeley.edu/~luca/cs174/byzantine.pdf&#34;&gt;https://people.eecs.berkeley.edu/~luca/cs174/byzantine.pdf&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reliable computer systems must handle malfunctioning components that give confilicting information to different parts of the system.
This situation can be expressed abstractly in terms of a group of generals of the Byzantine army camped with their troops around an enmemy city.
Communicating only by messenger, the generals must agree upon a common battle plan.
However, one or more of them may be traitors who will try to confuse the others.
The problem is to &lt;strong&gt;find an algorithm to ensure that the loyal generals will reach agreement.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个可靠的计算系统需要得当的处理其子部件因紊乱而向系统的其他部分发送相左的消息的情况。
这种情况可以抽象为以下场景：&lt;/p&gt;
&lt;p&gt;一群拜占庭将军围着一座敌城驻扎了多个军团，每个军团存在一位将军。在只能通过信使通信的情况下，他们需要决定一个共同的作战行动。
其中的几位将军有可能是叛徒，会不遗余力得误导其他人。
问题的关键就是&lt;strong&gt;找出一个算法，从而确保所有的忠将作出一致的决定。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>[译]用GoLang实现微服务（四）</title>
      <link>https://blog.dingkewz.com/post/tech/go_ewan_microservices_in_golang_part_4/</link>
      <pubDate>Tue, 17 Apr 2018 18:11:32 +0800</pubDate>
      
      <guid>https://blog.dingkewz.com/post/tech/go_ewan_microservices_in_golang_part_4/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;此系列文章介绍如何用GoLang实践微服务, 分十篇。此为其四。&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;原著作者：&lt;a href=&#34;https://ewanvalentine.io/&#34;&gt;Ewan Valentine&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;原文连接：&lt;a href=&#34;https://ewanvalentine.io/microservices-in-golang-part-4/&#34;&gt;https://ewanvalentine.io/microservices-in-golang-part-3/&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;&lt;em&gt;友情提示：系列文章的后五篇翻译请移步至&lt;a href=&#34;https://wuyin.io&#34;&gt;wuYin&amp;rsquo;s blog&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;em&gt;&lt;strong&gt;初稿&lt;/strong&gt;&lt;/em&gt;&lt;/del&gt; -&amp;gt; &lt;em&gt;&lt;strong&gt;润色&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://blog.dingkewz.com/post/tech/go_ewan_microservices_in_golang_part_3/&#34;&gt;上一篇文章中&lt;/a&gt;, 我们创建用户(User)服务，并且引入了数据库来保存数据。这回，我们希望用户微服务能安全的保存用户密码，并且有完整的机制来验证用户，从而在我们的几个微服务之间分发安全秘钥以互相沟通。&lt;/p&gt;
&lt;p&gt;请特别注意，我重构了项目结构，现在每个微服务都是一个单独的仓库，不再共处于一个父目录之下了。这样做更方便于代码的部署。你们大概记得，我一开始是想把所有微服务都放在一个仓库下的，但后来发现这样做使我很难管理 Go 项目的依赖，总是遇到一些冲突。随着每个项目的独立，我有必要讲讲如何测试，运行和部署一个个微服务。与此同时，由于各个微服务的独立，我们目前也不能使用 docker-compose 了，但这对我们的影响暂时不大。如果你对此有什么好的建议，欢迎给我&lt;a href=&#34;mailto:ewan.valentine89@gmail.com&#34;&gt;写邮件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;此外，你需要手动运行数据库了，就像下面这样:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker run -d -p 5432:5432 postgres
$ docker run -d -p 27017:27017 mongo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;独立出来的项目代码链接如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EwanValentine/shippy-consignment-service&#34;&gt;https://github.com/EwanValentine/shippy-consignment-service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EwanValentine/shippy-user-service&#34;&gt;https://github.com/EwanValentine/shippy-user-service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EwanValentine/shippy-vessel-service&#34;&gt;https://github.com/EwanValentine/shippy-vessel-service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EwanValentine/shippy-user-cli&#34;&gt;https://github.com/EwanValentine/shippy-user-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EwanValentine/shippy-consignment-cli&#34;&gt;https://github.com/EwanValentine/shippy-consignment-cli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[译]用GoLang实现微服务（三）</title>
      <link>https://blog.dingkewz.com/post/tech/go_ewan_microservices_in_golang_part_3/</link>
      <pubDate>Sun, 08 Apr 2018 17:04:26 +0800</pubDate>
      
      <guid>https://blog.dingkewz.com/post/tech/go_ewan_microservices_in_golang_part_3/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;此系列文章介绍如何用GoLang实践微服务, 分十篇。此为其三。&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;原著作者：&lt;a href=&#34;https://ewanvalentine.io/&#34;&gt;Ewan Valentine&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;原文连接：&lt;a href=&#34;https://ewanvalentine.io/microservices-in-golang-part-3/&#34;&gt;https://ewanvalentine.io/microservices-in-golang-part-3/&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;&lt;em&gt;友情提示：系列文章的后五篇翻译请移步至&lt;a href=&#34;https://wuyin.io&#34;&gt;wuYin&amp;rsquo;s blog&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;em&gt;&lt;strong&gt;初稿&lt;/strong&gt;&lt;/em&gt;&lt;/del&gt; -&amp;gt; &lt;em&gt;&lt;strong&gt;润色&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://blog.dingkewz.com/post/tech/go_ewan_microservices_in_golang_part_2/&#34;&gt;上一篇文章中&lt;/a&gt;, 我们了解了&lt;a href=&#34;https://github.com/micro/go-micro&#34;&gt;go-micro&lt;/a&gt; 以及 &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;的基础。同时引入了我们的第二个微服务，货船服务（vessel-service）。那么在此文中，我们将要了解一下 &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;docker-compose&lt;/a&gt;，并学会用它更好的运行和管理部署在本地的众多微服务。此外，我们还会稍微讲一下几种不同的数据库以及写下我们的第三个微服务！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译]用GoLang实现微服务（二）</title>
      <link>https://blog.dingkewz.com/post/tech/go_ewan_microservices_in_golang_part_2/</link>
      <pubDate>Mon, 02 Apr 2018 12:34:31 +0800</pubDate>
      
      <guid>https://blog.dingkewz.com/post/tech/go_ewan_microservices_in_golang_part_2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;此系列文章介绍如何用GoLang实践微服务, 分十篇。此为其二。&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;原著作者：&lt;a href=&#34;https://ewanvalentine.io/&#34;&gt;Ewan Valentine&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;原文连接：&lt;a href=&#34;https://ewanvalentine.io/microservices-in-golang-part-2/&#34;&gt;https://ewanvalentine.io/microservices-in-golang-part-2/&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;&lt;em&gt;友情提示：系列文章的后五篇翻译请移步至&lt;a href=&#34;https://wuyin.io&#34;&gt;wuYin&amp;rsquo;s blog&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;em&gt;&lt;strong&gt;初稿&lt;/strong&gt;&lt;/em&gt;&lt;/del&gt; -&amp;gt; &lt;em&gt;&lt;strong&gt;润色&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://blog.dingkewz.com/post/tech/go_ewan_microservices_in_golang_part_1/&#34;&gt;上一篇文章中&lt;/a&gt;, 我们大致掌握了如何用gRPC来构建微服务。在这篇文章中，我们要介绍如何容器化(Dockerize)我们的微服务，在此过程中，我们将引入使用go-micro以及写下我们的第二个微服务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译]用GoLang实现微服务（一）</title>
      <link>https://blog.dingkewz.com/post/tech/go_ewan_microservices_in_golang_part_1/</link>
      <pubDate>Mon, 26 Mar 2018 20:19:00 +0800</pubDate>
      
      <guid>https://blog.dingkewz.com/post/tech/go_ewan_microservices_in_golang_part_1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;此系列文章介绍如何用GoLang实践微服务, 分十篇。此为其首。&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;原著作者：&lt;a href=&#34;https://ewanvalentine.io/&#34;&gt;Ewan Valentine&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;原文连接：&lt;a href=&#34;https://ewanvalentine.io/microservices-in-golang-part-1/&#34;&gt;https://ewanvalentine.io/microservices-in-golang-part-1/&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;&lt;em&gt;友情提示：系列文章的后五篇翻译请移步至&lt;a href=&#34;https://wuyin.io&#34;&gt;wuYin&amp;rsquo;s blog&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;del&gt;初稿&lt;/del&gt; -&amp;gt; 润色&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;导言&#34;&gt;导言&lt;/h1&gt;
&lt;p&gt;在本文中，我们将了解一些基础的概念，术语。同时将创建我们的第一个微服务，尽管它会非常简陋。&lt;/p&gt;
&lt;p&gt;在接下来的文章中，我们会陆续创建以下微服务:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;consignments (货运)&lt;/li&gt;
&lt;li&gt;inventory (仓库)&lt;/li&gt;
&lt;li&gt;users (用户)&lt;/li&gt;
&lt;li&gt;authentication (认证)&lt;/li&gt;
&lt;li&gt;roles (角色)&lt;/li&gt;
&lt;li&gt;vessels (货船)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完整的技术栈如下：golang, mongodb, grpc, docker, Google Cloud, Kubernetes, NATS, CircleCI, Terrafrom and go-micro.&lt;/p&gt;
&lt;p&gt;在你跟随此文学习时，请务必设置合适的GOPATH，以及使用这个&lt;a href=&#34;https://github.com/EwanValentine/shippy&#34;&gt;git仓库&lt;/a&gt;(每篇文章对应一个分支)。&lt;/p&gt;
&lt;p&gt;另外，我的工作平台是Macbook，所以如果你的工作平台有所不同，那么文章中的些许地方需要相应的改动，比如Makefiles中的&lt;code&gt;$GOPATH&lt;/code&gt;和&lt;code&gt;$(GOPATH)&lt;/code&gt;，请您自行关注。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[NodeJS源码探秘]之process.binding()</title>
      <link>https://blog.dingkewz.com/post/tech/nodejs_04_process_binding/</link>
      <pubDate>Thu, 22 Mar 2018 17:22:42 +0800</pubDate>
      
      <guid>https://blog.dingkewz.com/post/tech/nodejs_04_process_binding/</guid>
      <description>&lt;p&gt;&lt;em&gt;NodeJS是时下非常流行的服务器语言, 这个系列将着重研究NodeJS的源码，以期为之做出贡献。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这篇文章写给初读NodeJS源码的朋友们。process.binding()大概是初读源码时我们最常碰见的函数。现在我们就聊聊它干了什么和它具体的代码。&lt;/p&gt;
&lt;p&gt;我们都知道NodeJS的底层是用C++写的。所以一个NodeJS程序从宏观上看有两个世界：JavaScript 以及 C++。在JS中，我们出于追求性能或者结构限制，需要使用C++的代码。在这种情况下，process.binding()就起到了连接C++函数到JS的功能。简单点将，我们可以将它比作require函数。&lt;/p&gt;
&lt;p&gt;当然process.binding()不是process模块公开API的一部分。它只在我们bootstrap NodeJS的内部C++函数时使用。&lt;/p&gt;
&lt;p&gt;接下来，让我们会看一下其源码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[NodeJS源码探秘]之启动全流程</title>
      <link>https://blog.dingkewz.com/post/tech/nodejs_source_startup03/</link>
      <pubDate>Wed, 21 Mar 2018 16:53:53 +0800</pubDate>
      
      <guid>https://blog.dingkewz.com/post/tech/nodejs_source_startup03/</guid>
      <description>&lt;p&gt;&lt;em&gt;NodeJS是时下非常流行的服务器语言, 这个系列将着重研究NodeJS的源码，以期为之做出贡献。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这篇文章将研究NodeJS的启动全流程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>谷歌V8引擎探秘：基础概念</title>
      <link>https://blog.dingkewz.com/post/tech/google_v8_core_concepts_01/</link>
      <pubDate>Sat, 27 Jan 2018 17:18:37 +0800</pubDate>
      
      <guid>https://blog.dingkewz.com/post/tech/google_v8_core_concepts_01/</guid>
      <description>&lt;p&gt;&lt;em&gt;V8引擎是驱动NodeJS的核心。为此有必要深入了解其API和运行机制。此系列文章旨在记录我自己探索学习V8引擎的记录。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;本文章是此系列的第一篇，将梳理一遍V8引擎的几个总要概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Context&lt;/li&gt;
&lt;li&gt;Handle&lt;/li&gt;
&lt;li&gt;Handle Scope&lt;/li&gt;
&lt;li&gt;Templates&lt;/li&gt;
&lt;li&gt;Isolates&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>[NodeJS源码探秘]之require()</title>
      <link>https://blog.dingkewz.com/post/tech/nodejs_source_01/</link>
      <pubDate>Fri, 17 Nov 2017 14:16:22 +0800</pubDate>
      
      <guid>https://blog.dingkewz.com/post/tech/nodejs_source_01/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;部分源码已过时 -&amp;gt; 升级至9.11&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NodeJS是时下非常流行的服务器语言, 这个系列将着重研究NodeJS的源码，以期为之做出贡献。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;第一篇文章就是要搞清楚我们经常使用的require()函数到底是如何运作的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[学无止境]之Numpy概览</title>
      <link>https://blog.dingkewz.com/post/tech/numpy%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 12 Oct 2017 01:14:43 +0000</pubDate>
      
      <guid>https://blog.dingkewz.com/post/tech/numpy%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;p&gt;Numpy是用于python的矩阵计算库, 被用来创建矩阵和操作与矩阵相关的各种运算。Numpy非常之高效，是python科学计算栈Scipy Stack的基石。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[简明JavaScript]之async/await</title>
      <link>https://blog.dingkewz.com/post/tech/javascript_async_await/</link>
      <pubDate>Sat, 10 Jun 2017 14:40:04 +0800</pubDate>
      
      <guid>https://blog.dingkewz.com/post/tech/javascript_async_await/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt;简明 JavaScript 系列是我自己学习 JavaScript 概念时的笔记，旨在记录学习资料以及自己在实践中的感想。每一期尽量有一个有趣的 Demo 。&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It will be legen, wait for it&amp;hellip;, and I hope you&amp;rsquo;re not lactose intolerant because the second half of that word is&amp;hellip; dairy!&lt;br&gt;
-&lt;a href=&#34;https://en.wikipedia.org/wiki/Barney_Stinson&#34;&gt;Barney Stinson&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;waitForIt&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;words&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-wait for it... and I hope you&amp;#39;re not lactose intolerant because the second half of that word is—&amp;#34;&lt;/span&gt;)

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Promise(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;reject&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(() =&amp;gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dairy!&amp;#34;&lt;/span&gt;)
    }, &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;)
  })
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;barneySays&lt;/span&gt; () {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It will be legen&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;waitForIt&lt;/span&gt;()
  &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt;)
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;barneySays&lt;/span&gt;()
&lt;span style=&#34;color:#75715e&#34;&gt;// It will be legen-wait for it... and I hope you&amp;#39;re not lactose intolerant because the second half of that word is—dairy!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;照例，以下是学习资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&#34;&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9&#34;&gt;Why async/await is better than Promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://javascript.info/async-await&#34;&gt;JavaScript.Info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[简明JavaScript]之Promise</title>
      <link>https://blog.dingkewz.com/post/tech/javascript_promise/</link>
      <pubDate>Mon, 11 Apr 2016 09:33:05 +0800</pubDate>
      
      <guid>https://blog.dingkewz.com/post/tech/javascript_promise/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt;简明 JavaScript 系列是我自己学习 JavaScript 概念时的笔记，旨在记录学习资料以及自己在实践中的感想。每一期尽量有一个有趣的 Demo 。&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readline&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;readline&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readline&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createInterface&lt;/span&gt;({
  &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stdin&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stdout&lt;/span&gt;
})

&lt;span style=&#34;color:#75715e&#34;&gt;// 请原谅我这庸俗的剧情
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;said&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Alice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Will you always be here with me?&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;said&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oh dear Alice, why would I ever want to leave you?&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;said&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Alice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Promise me!&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;promise&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makePromise&lt;/span&gt;()

&lt;span style=&#34;color:#a6e22e&#34;&gt;promise&lt;/span&gt;
  .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(() =&amp;gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Alice and Bob were happy ever after.&amp;#39;&lt;/span&gt;)
  })
  .&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; =&amp;gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bob eventually left Alice, what a jerk.&amp;#39;&lt;/span&gt;)
  })

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;said&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;who&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;words&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;who&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; said: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;words&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 到了这里会有一个问题，试着跑一下？
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makePromise&lt;/span&gt; () {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;said&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I promise I would never leave you.&amp;#39;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Promise(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;reject&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;rl&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;question&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;你来决定故事的走向: &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;answer&lt;/span&gt; =&amp;gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;answer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;good&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bob is true to his words&amp;#39;&lt;/span&gt;)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reject&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bob is a total ass&amp;#39;&lt;/span&gt;)
    })
  })
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;女士们，先生们，看到了吗，这就是我们今天的主角 Promise。照例，以下是学习资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://liubin.org/promises-book/#then-return-new-promise&#34;&gt;JavaScript Promise 迷你书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://javascript.info/promise-chaining#error-handling&#34;&gt;Promise Chain Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spin.atomicobject.com/2017/04/06/nodejs-promises-callbacks/&#34;&gt;Never Mix Promises and Callbacks in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
